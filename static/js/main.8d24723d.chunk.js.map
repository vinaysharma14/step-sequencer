{"version":3,"sources":["assets/sounds/tick.wav","assets/sounds/tock.wav","assets/sounds/kick.wav","assets/sounds/snare.wav","assets/sounds/clap.wav","assets/sounds/ride.wav","assets/sounds/808.wav","assets/sounds/trap.wav","assets/icons/metronome.png","components/PlayBar/index.js","components/StepSequencer/ChannelRackSettings/index.js","components/StepSequencer/ChannelRack/index.js","components/StepSequencer/SampleUploader/index.js","components/StepSequencer/index.js","components/App/index.js","serviceWorker.js","stores/PlayBarStore/index.js","stores/StepSequencerStore/index.js","stores/index.js","index.js"],"names":["module","exports","__webpack_require__","p","PlayBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playAudio","incrementBeat","_this$props$store$pla","store","playBarStore","beatCount","metronomeActive","handleBeatCountChange","playing","playBeats","playMetronome","stopBeatIncrement","clearInterval","beatIncrementer","resetBeatCount","toggleMetronome","paused","triggerBeatIncrement","handleBpmChange","event","bpmCount","target","value","isNaN","Number","length","toString","stopAudio","setState","delayMetronome","ms","Promise","res","setTimeout","playMetronomeBeforeRecord","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","tick","play","tock","stop","_callee2","_context2","stepSequencerStore","recordingNotes","pauseAudio","setInterval","handleKeyEvent","keyCode","Howl","src","load","document","addEventListener","_this$props$store$ste","toggleNoteRecording","react_default","createElement","Container","className","Row","Col","stopped","index_es","icon","faPlay","onClick","faPause","faMicrophone","faMicrophoneAltSlash","faStop","require","alt","onChange","id","type","name","Component","inject","observer","ChannelRackSettings","patternRepeaters","handleVolumeChange","changeMasterVolume","_this$props","sampleIndex","masterSettings","sampleVolume","muteVolume","_this$props$store$ste2","muteMaster","_this$props2","unMuteVolume","_this$props$store$ste3","unMuteMaster","_this$props3","resetChannelRack","_this$props$store$ste4","resetMaster","_this$props4","setChannelFrequency","frequencyCount","_this$props$store$ste5","setMasterFrequency","_this$props5","_this2","_this$props6","toggleMasterKeyboard","masterKeyboardToggled","faKeyboard","map","index","key","e","concat","faUndo","faVolumeUp","faVolumeMute","ChannelRack","inputKey","bindedKey","handleKeyInput","getKeyBindedSample","keyInput","toUpperCase","charCodeAt","handleKeyBinding","bindKey","item","String","fromCharCode","beatActive","beatIndex","toggleBeatBar","masterVolume","lg","sampleName","faMusic","onKeyDown","autoFocus","beatBars","getBeatBarClass","StepSequencer_ChannelRackSettings","SampleUploader","handleSampleUpload","bind","assertThisInitialized","uploadedSample","React","createRef","_loop","i","getBase64","current","files","base64","file","callback","reader","FileReader","result","readAsDataURL","ref","accept","multiple","htmlFor","faPlus","StepSequencer","prevState","loadChannelRack","channelRack","StepSequencer_ChannelRack","StepSequencer_SampleUploader","App","playSample","undefined","_","throttle","recordNotes","components_PlayBar","components_StepSequencer","Boolean","window","location","hostname","match","PlayBarStore","Store","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","observable","action","_this3","_this4","_this5","_this6","_this7","StepSequencerStore","samples","source","kick","snare","clap","ride","trapKick","trapSnare","push","forEach","sample","activeBeats","mutedVolume","howlObject","volume","activeSamples","fill","_this8","_this9","_this10","_this11","masterMuted","_this12","newMasterVolume","_this13","split","charAt","slice","newSample","_this14","_this15","_this16","_this17","_this18","_this19","getActiveSamples","_this20","ReactDOM","render","mobx_react_module","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d24723d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tick.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/tock.fe0ded65.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.1b2e3745.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.f8fee813.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap.b64371ab.wav\";","module.exports = __webpack_public_path__ + \"static/media/ride.9ef541f1.wav\";","module.exports = __webpack_public_path__ + \"static/media/808.c443e296.wav\";","module.exports = __webpack_public_path__ + \"static/media/trap.24821dd0.wav\";","module.exports = __webpack_public_path__ + \"static/media/metronome.e5e3392e.png\";","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Howl } from 'howler';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay, faPause, faStop, faMicrophone, faMicrophoneAltSlash } from '@fortawesome/free-solid-svg-icons'\n\nimport tick from '../../assets/sounds/tick.wav';\nimport tock from '../../assets/sounds/tock.wav';\n\nimport './style.css';\n\nclass PlayBar extends Component {\n  constructor(props) {\n    super(props);\n    this.tick = new Howl({\n      src: [tick],\n    });\n    this.tick.load();\n    this.tock = new Howl({\n      src: [tock],\n    });\n    this.tock.load();\n  }\n\n  state = {\n    playAudio: true,\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyEvent);\n  }\n\n  incrementBeat = () => {\n    const { beatCount, metronomeActive, handleBeatCountChange, playing } = this.props.store.playBarStore;\n    const { playBeats } = this.props;\n\n    if (metronomeActive) {\n      this.playMetronome(beatCount);\n    }\n    if (playing) {\n      playBeats(beatCount);\n    }\n    handleBeatCountChange(beatCount);\n  }\n\n  playMetronome(beatCount) {\n    if (beatCount === 0) {\n      this.tick.play();\n    } else if (beatCount === 8 || beatCount === 16 || beatCount === 24) {\n      this.tock.play();\n    }\n  }\n\n  stopBeatIncrement = () => {\n    clearInterval(this.beatIncrementer);\n    const { resetBeatCount } = this.props.store.playBarStore;\n    resetBeatCount();\n  }\n\n  toggleMetronome = () => {\n    const { playBarStore } = this.props.store;\n    playBarStore.toggleMetronome();\n\n    if (playBarStore.playing || playBarStore.paused) {\n      return;\n    }\n\n    if (playBarStore.metronomeActive) {\n      this.triggerBeatIncrement();\n      this.incrementBeat();\n    } else {\n      this.stopBeatIncrement();\n    }\n  }\n\n  handleBpmChange = (event) => {\n    const { playBarStore } = this.props.store;\n    const bpmCount = event.target.value;\n\n    if (!bpmCount || isNaN(bpmCount) || bpmCount === ' ') {\n      playBarStore.handleBpmChange('');\n      return;\n    }\n\n    if (bpmCount === '00') {\n      playBarStore.handleBpmChange('00');\n      return;\n    }\n\n    if (Number(bpmCount) >= 1 && Number(bpmCount) <= 9 && bpmCount.length <= 2) {\n      playBarStore.handleBpmChange(bpmCount);\n      return;\n    }\n\n    if (Number(bpmCount) > 0 && Number(bpmCount) <= 999) {\n      playBarStore.handleBpmChange(Number(bpmCount).toString());\n      if (playBarStore.paused) {\n        return;\n      }\n      if (playBarStore.metronomeActive || playBarStore.playing) {\n        this.stopBeatIncrement();\n        this.triggerBeatIncrement();\n      }\n    }\n  }\n\n  bpmIncreased(bpmCount) {\n    const { playBarStore } = this.props.store;\n    return Number(bpmCount) > Number(playBarStore.bpmCount);\n\n  }\n\n  stopAudio = () => {\n    const { playBarStore } = this.props.store;\n    playBarStore.stopAudio();\n    this.stopBeatIncrement();\n    if (playBarStore.metronomeActive) {\n      this.toggleMetronome();\n    }\n    this.setState({\n      playAudio: true,\n    });\n  }\n\n  delayMetronome = ms => new Promise(res => setTimeout(res, ms));\n\n  playMetronomeBeforeRecord = async () => {\n    const { playBarStore } = this.props.store;\n    this.tick.play();\n    await this.delayMetronome((60 / playBarStore.bpmCount) * 1000);\n    this.tock.play();\n    await this.delayMetronome((60 / playBarStore.bpmCount) * 1000);\n    this.tock.play();\n    await this.delayMetronome((60 / playBarStore.bpmCount) * 1000);\n    this.tock.play();\n    await this.delayMetronome((60 / playBarStore.bpmCount) * 1000);\n  }\n\n  playAudio = async () => {\n    const { playBarStore } = this.props.store;\n    const { recordingNotes } = this.props.store.stepSequencerStore;\n\n    if (recordingNotes) {\n      clearInterval(this.beatIncrementer);\n      await this.playMetronomeBeforeRecord();\n    }\n\n    playBarStore.playAudio();\n    if (playBarStore.metronomeActive && playBarStore.playing) {\n      clearInterval(this.beatIncrementer);\n      playBarStore.resetBeatCount();\n      this.triggerBeatIncrement();\n      this.incrementBeat();\n    } else {\n      this.triggerBeatIncrement();\n      this.incrementBeat();\n    }\n    this.setState({\n      playAudio: false,\n    });\n  }\n\n  pauseAudio = () => {\n    const { playBarStore } = this.props.store;\n    playBarStore.pauseAudio();\n    clearInterval(this.beatIncrementer);\n    this.setState({\n      playAudio: true,\n    });\n  }\n\n  triggerBeatIncrement = () => {\n    const { playBarStore } = this.props.store;\n    this.beatIncrementer = setInterval(\n      this.incrementBeat,\n      (60 / playBarStore.bpmCount) * 125\n    );\n  }\n\n  handleKeyEvent = (event) => {\n    const keyCode = event.keyCode;\n    const { playAudio } = this.state;\n\n    if (keyCode === 32) {\n      if (playAudio) {\n        this.playAudio();\n      }\n      else {\n        this.pauseAudio();\n      }\n    }\n  }\n\n  render() {\n    const { playBarStore } = this.props.store;\n    const { recordingNotes, toggleNoteRecording } = this.props.store.stepSequencerStore;\n    return (\n      <Container className=\"playbar\">\n        <Row>\n          <Col>\n            {\n              (playBarStore.paused || playBarStore.stopped) &&\n              <FontAwesomeIcon\n                className={playBarStore.stopped ? \"playbar-icon inactive\" : \"playbar-icon\"}\n                icon={faPlay}\n                onClick={this.playAudio} />\n            }\n            {\n              playBarStore.playing &&\n              <FontAwesomeIcon\n                className={playBarStore.playing ? \"playbar-icon\" : \"playbar-icon inactive\"}\n                icon={faPause}\n                onClick={this.pauseAudio} />\n            }\n          </Col>\n          <Col className=\"border-left\">\n            {\n              recordingNotes ?\n                <FontAwesomeIcon\n                  className=\"playbar-icon\"\n                  icon={faMicrophone}\n                  onClick={toggleNoteRecording} /> :\n                <FontAwesomeIcon\n                  className=\"playbar-icon inactive\"\n                  icon={faMicrophoneAltSlash}\n                  onClick={toggleNoteRecording} />\n            }\n          </Col>\n          <Col className=\"border-left\">\n            <FontAwesomeIcon\n              className={playBarStore.stopped ? \"playbar-icon\" : \"playbar-icon inactive\"}\n              icon={faStop}\n              onClick={this.stopAudio} />\n          </Col>\n          <Col className=\"border-left\">\n            <span>\n              <img\n                className={playBarStore.metronomeActive ? \"metronome-icon\" : \"metronome-icon metronome-inactive\"}\n                src={require('../../assets/icons/metronome.png')}\n                alt=''\n                onClick={this.toggleMetronome} />\n            </span>\n          </Col>\n          <Col className=\"border-left\">\n            <input\n              value={playBarStore.bpmCount}\n              onChange={this.handleBpmChange}\n              id=\"bpm_input\"\n              type=\"text\"\n              name=\"name\" />\n              <span className=\"bpm\">BPM</span>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default inject('store')(observer(PlayBar));\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUndo, faVolumeUp, faVolumeMute, faKeyboard } from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css';\n\nclass ChannelRackSettings extends Component {\n  state = {\n    patternRepeaters: [1, 2, 4, 8],\n  }\n\n  handleVolumeChange = (event) => {\n    const { handleVolumeChange, changeMasterVolume } = this.props.store.stepSequencerStore;\n    const { sampleIndex, masterSettings } = this.props;\n    const sampleVolume = event.target.value;\n    if (masterSettings) {\n      changeMasterVolume(sampleVolume);\n      return;\n    }\n    handleVolumeChange(sampleIndex, sampleVolume);\n  }\n\n  muteVolume = () => {\n    const { muteVolume, muteMaster } = this.props.store.stepSequencerStore;\n    const { sampleIndex, masterSettings } = this.props;\n    if (masterSettings) {\n      muteMaster();\n      return;\n    }\n    muteVolume(sampleIndex);\n  }\n\n  unMuteVolume = () => {\n    const { unMuteVolume, unMuteMaster } = this.props.store.stepSequencerStore;\n    const { sampleIndex, masterSettings } = this.props;\n    if (masterSettings) {\n      unMuteMaster();\n      return;\n    }\n    unMuteVolume(sampleIndex);\n  }\n\n  resetChannelRack = () => {\n    const { resetChannelRack, resetMaster } = this.props.store.stepSequencerStore;\n    const { sampleIndex, masterSettings } = this.props;\n    if (masterSettings) {\n      resetMaster();\n      return;\n    }\n    resetChannelRack(sampleIndex);\n  }\n\n  setChannelFrequency = (frequencyCount) => {\n    const { setChannelFrequency, setMasterFrequency } = this.props.store.stepSequencerStore;\n    const { sampleIndex, masterSettings } = this.props;\n    if (masterSettings) {\n      setMasterFrequency(frequencyCount);\n      return;\n    }\n    setChannelFrequency(sampleIndex, frequencyCount);\n  }\n\n  render() {\n    const { masterSettings, toggleMasterKeyboard, masterKeyboardToggled } = this.props;\n    const { patternRepeaters } = this.state;\n    return (\n      <div className=\"channel-settings mt-3\">\n        {\n          masterSettings &&\n          <div className={masterKeyboardToggled ? \"master-keyboard toggled\" : \"master-keyboard\"}>\n            <FontAwesomeIcon\n              icon={faKeyboard}\n              className=\"cursor\"\n              onClick={toggleMasterKeyboard}\n            />\n          </div>\n        }\n        {\n          patternRepeaters.map((frequencyCount, index) => (\n            <p\n              key={index}\n              className=\"cursor vertical-mid\"\n              onClick={e => this.setChannelFrequency(frequencyCount)}\n            >\n              {frequencyCount.toString().concat('x')}</p>\n          ))\n        }\n        <FontAwesomeIcon\n          icon={faUndo}\n          className=\"cursor\"\n          onClick={this.resetChannelRack}\n        />\n        {\n          this.props.sampleVolume ?\n            <FontAwesomeIcon\n              icon={faVolumeUp}\n              onClick={this.muteVolume}\n              className=\"cursor\" /> :\n            <FontAwesomeIcon\n              icon={faVolumeMute}\n              onClick={this.unMuteVolume}\n              className=\"cursor\" />\n        }\n        <input\n          type=\"range\"\n          value={this.props.sampleVolume}\n          onChange={this.handleVolumeChange}\n          className=\"volumeSlider\" />\n      </div>\n    )\n  }\n}\n\nexport default inject('store')(observer(ChannelRackSettings));","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Row, Col } from 'react-bootstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMusic, faKeyboard } from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css';\nimport ChannelRackSettings from '../ChannelRackSettings';\n\nclass ChannelRack extends Component {\n  state = {\n    inputKey: false,\n    bindedKey: '',\n  }\n\n  getBeatBarClass(beatActive, beatIndex) {\n    const { playing, paused } = this.props.store.playBarStore;\n    let { beatCount } = this.props.store.playBarStore;\n    let barClass = \"beat-bar\";\n\n    beatCount = beatCount - 1;\n    if (beatCount === -1) {\n      beatCount = 31;\n    }\n\n    if (beatIndex === beatCount && (playing || paused)) {\n      if (beatActive) {\n        return barClass.concat(\" activePlay\");\n      }\n      return barClass.concat(\" playing\");\n    }\n\n    if (beatActive) {\n      return barClass.concat(\" playing\");\n    }\n\n    return barClass;\n  }\n\n  inputKey = () => {\n    this.setState({\n      inputKey: true,\n    })\n  }\n\n  handleKeyInput = (event) => {\n    const { getKeyBindedSample } = this.props.store.stepSequencerStore\n    let keyInput = event.target.value;\n    if (keyInput === ' ' || keyInput[1] === ' ') {\n      return;\n    }\n    if (keyInput.length > 1) {\n      keyInput = keyInput[1];\n    }\n    if (getKeyBindedSample(keyInput.toUpperCase().charCodeAt(0)) === false) {\n      this.setState({\n        bindedKey: keyInput.toUpperCase(),\n      })\n    }\n  }\n\n  handleKeyBinding = (event) => {\n    const { bindKey } = this.props.store.stepSequencerStore;\n    const { bindedKey } = this.state;\n    const { sampleIndex, item } = this.props;\n\n    if (event.keyCode === 27) {\n      this.setState({\n        inputKey: false,\n        bindedKey: item.bindedKey ? String.fromCharCode(item.bindedKey) : '',\n      })\n    } else if (event.keyCode === 13) {\n      bindKey(sampleIndex, bindedKey);\n      this.setState({\n        inputKey: false,\n      })\n    }\n  }\n\n  render() {\n    const { sampleIndex, item, playBeats, masterKeyboardToggled } = this.props;\n    const { toggleBeatBar, masterVolume } = this.props.store.stepSequencerStore;\n\n    return (\n      <Row key={sampleIndex}>\n        <Col lg={2} className=\"mt-3\">\n          <div className=\"sample-button\">\n            {item.sampleName}\n            <FontAwesomeIcon\n              icon={faMusic}\n              className=\"sample-preview\"\n              onClick={e => playBeats(null, sampleIndex)}\n            />\n            {\n              this.state.inputKey || masterKeyboardToggled?\n                <input\n                  value={this.state.bindedKey}\n                  className=\"key-binding-input\"\n                  onChange={this.handleKeyInput}\n                  onKeyDown={this.handleKeyBinding}\n                  autoFocus\n                /> :\n                <FontAwesomeIcon\n                  icon={faKeyboard}\n                  className=\"key-binding\"\n                  onClick={this.inputKey}\n                />\n            }\n          </div>\n        </Col>\n        <Col lg={6} className=\"left-border\">\n          <div className=\"sample-button mt-3 flex\">\n            {\n              item.beatBars.map((beatActive, index) =>\n                <div\n                  key={index}\n                  onClick={e => toggleBeatBar(sampleIndex, index)}\n                  className={this.getBeatBarClass(beatActive, index)}\n                />)\n            }\n          </div>\n        </Col>\n        <Col lg={4} className=\"left-border\">\n          <ChannelRackSettings\n            sampleIndex={sampleIndex}\n            sampleVolume={masterVolume !== 100 ? item.masterVolume : item.sampleVolume}\n          />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default inject('store')(observer(ChannelRack));","import React, { Component } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css';\nimport { inject, observer } from 'mobx-react';\n\nclass SampleUploader extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSampleUpload = this.handleSampleUpload.bind(this);\n    this.uploadedSample = React.createRef();\n  }\n\n  handleSampleUpload() {\n    const { handleSampleUpload } = this.props.store.stepSequencerStore;\n    for (let i = 0; i < this.uploadedSample.current.files.length; i++) {\n      this.getBase64(this.uploadedSample.current.files[i], base64 => {\n        handleSampleUpload({ name: this.uploadedSample.current.files[i].name, base64 });\n      });\n    }\n  }\n\n  getBase64(file, callback) {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => callback(reader.result));\n    reader.readAsDataURL(file);\n  }\n\n  render() {\n    return (\n      <div className=\"sample-uploader\">\n        <input\n          type=\"file\"\n          id=\"file\"\n          ref={this.uploadedSample}\n          onChange={this.handleSampleUpload}\n          accept=\"audio/wav\"\n          className=\"hidden\"\n          multiple\n        />\n        <label htmlFor=\"file\" className=\"input-sample\">\n          <FontAwesomeIcon\n            icon={faPlus}\n            className=\"sample-preview\"\n          />\n        </label>\n      </div>\n    )\n  }\n}\n\nexport default inject('store')(observer(SampleUploader));","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport ChannelRack from './ChannelRack';\nimport ChannelRackSettings from './ChannelRackSettings'\nimport SampleUploader from './SampleUploader';\nimport './style.css';\n\nclass StepSequencer extends Component {\n  constructor(props) {\n    super(props);\n    const { loadChannelRack } = this.props.store.stepSequencerStore;\n    loadChannelRack();\n  }\n\n  state = {\n    masterKeyboardToggled: false,\n  }\n\n  toggleMasterKeyboard = () => {\n    this.setState((prevState) => ({\n      masterKeyboardToggled: !prevState.masterKeyboardToggled,\n    }))\n  }\n\n  render() {\n    const { channelRack, masterVolume } = this.props.store.stepSequencerStore;\n    const { playBeats } = this.props;\n\n    return (\n      <Container className=\"step-sequencer\">\n        {\n          channelRack.map((item, sampleIndex) =>\n            <ChannelRack\n              key={sampleIndex}\n              sampleIndex={sampleIndex}\n              item={item}\n              playBeats={playBeats}\n              masterKeyboardToggled={this.state.masterKeyboardToggled}\n            />)\n        }\n        <Row>\n          <Col lg={2} className=\"mt-3\">\n            <SampleUploader />\n          </Col>\n          <Col lg={10} className=\"left-border mb-3\">\n            <div className=\"master-settings\">\n              <ChannelRackSettings\n                masterSettings\n                sampleVolume={masterVolume}\n                toggleMasterKeyboard={this.toggleMasterKeyboard}\n                masterKeyboardToggled={this.state.masterKeyboardToggled}\n              />\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default inject('store')(observer(StepSequencer));\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport _ from 'lodash';\n\nimport PlayBar from '../PlayBar';\nimport StepSequencer from '../StepSequencer';\nimport './style.css';\n\nclass App extends Component {\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyEvent);\n  }\n\n  playBeats = (beatCount, sampleIndex) => {\n    const { playBeats, playSample } = this.props.store.stepSequencerStore;\n    if (beatCount !== null) {\n      playBeats(beatCount);\n    }\n    if (sampleIndex !== undefined) {\n      playSample(sampleIndex);\n    }\n  }\n\n  handleKeyEvent = _.throttle((event) => {\n    const { getKeyBindedSample, recordingNotes, recordNotes } = this.props.store.stepSequencerStore;\n    const { beatCount, playing } = this.props.store.playBarStore;\n    const keyCode = event.keyCode;\n    const sampleIndex = getKeyBindedSample(keyCode);\n\n    if (sampleIndex !== false) {\n      if (playing && recordingNotes) {\n        recordNotes(sampleIndex, beatCount);\n        return;\n      }\n      this.playBeats(null, sampleIndex);\n    }\n  }, 50);\n\n  render() {\n    return (\n      <div className=\"app\">\n        <PlayBar\n          playBeats={this.playBeats}\n        />\n        <StepSequencer\n          playBeats={this.playBeats}\n        />\n      </div>\n    );\n  }\n}\n\nexport default inject('store')(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, action } from 'mobx';\n\nclass PlayBarStore {\n  @observable playing = false;\n\n  @observable paused = false;\n\n  @observable stopped = true;\n\n  @observable metronomeActive = false;\n\n  @observable bpmCount = '128';\n\n  @observable beatCount = 0;\n\n  constructor(Store) {\n    this.Store = Store;\n  }\n\n  @action playAudio = () => {\n    this.playing = true;\n    this.paused = false;\n    this.stopped = false;\n  }\n\n  @action pauseAudio = () => {\n    this.playing = false;\n    this.paused = true;\n    this.stopped = false;\n  }\n\n  @action stopAudio = () => {\n    this.playing = false;\n    this.paused = false;\n    this.stopped = true;\n  }\n\n  @action toggleMetronome = () => {\n    this.metronomeActive = !this.metronomeActive;\n  }\n\n  @action handleBpmChange = (bpmCount) => {\n    this.bpmCount = bpmCount;\n  }\n\n  @action handleBeatCountChange = () => {\n    this.beatCount = (this.beatCount + 1) % 32;\n  }\n\n  @action resetBeatCount = () => {\n    this.beatCount = 0;\n  }\n}\n\nexport default PlayBarStore;\n","import { observable, action } from 'mobx';\nimport { Howl } from 'howler';\n\nimport kick from '../../assets/sounds/kick.wav';\nimport snare from '../../assets/sounds/snare.wav';\nimport clap from '../../assets/sounds/clap.wav';\nimport ride from '../../assets/sounds/ride.wav';\nimport trapKick from '../../assets/sounds/808.wav';\nimport trapSnare from '../../assets/sounds/trap.wav';\n\nclass StepSequencerStore {\n  @observable channelRack = [];\n\n  @observable masterVolume = 100;\n\n  @observable masterMuted = 100;\n\n  @observable recordingNotes = false;\n\n  @action toggleBeatBar = (sampleIndex, beatIndex) => {\n    this.channelRack[sampleIndex].beatBars[beatIndex] = !this.channelRack[sampleIndex].beatBars[beatIndex];\n  }\n\n  @action loadChannelRack = () => {\n    const samples = [\n      { name: 'Kick', source: kick },\n      { name: 'Snare', source: snare },\n      { name: 'Clap', source: clap },\n      { name: 'Ride', source: ride },\n      { name: '808', source: trapKick },\n      { name: 'Trap', source: trapSnare },\n    ];\n\n    let channelRack = [];\n    let beatBars = [];\n    for (var i = 0; i < 32; i++) {\n      beatBars.push(false);\n    }\n    samples.forEach((sample) => {\n      channelRack.push({\n        sampleName: sample.name,\n        activeBeats: [],\n        beatBars,\n        sampleVolume: 75,\n        mutedVolume: 75,\n        masterVolume: 75,\n        howlObject: new Howl({\n          src: sample.source,\n          volume: 0.75,\n        }),\n      });\n    });\n    this.channelRack = channelRack;\n  }\n\n  @action getActiveSamples = (beatCount) => {\n    let activeSamples = [];\n    for (var i = 0; i < this.channelRack.length; i++) {\n      if (this.channelRack[i].beatBars[beatCount]) {\n        activeSamples.push(i);\n      }\n    }\n    return activeSamples;\n  }\n\n  @action handleVolumeChange = (sampleIndex, sampleVolume) => {\n    if (this.masterVolume !== 100) {\n      return;\n    }\n    this.channelRack[sampleIndex].sampleVolume = Number(sampleVolume);\n    this.channelRack[sampleIndex].howlObject.volume(Number(sampleVolume) / 100);\n  }\n\n  @action muteVolume = (sampleIndex) => {\n    let channelRack = this.channelRack[sampleIndex];\n    if (this.masterVolume !== 100) {\n      channelRack.masterVolume = 0;\n      channelRack.howlObject.volume(0);\n      return;\n    }\n    channelRack.mutedVolume = channelRack.sampleVolume;\n    channelRack.sampleVolume = 0;\n    channelRack.howlObject.volume(0);\n  }\n\n  @action unMuteVolume = (sampleIndex) => {\n    let channelRack = this.channelRack[sampleIndex];\n    if (this.masterVolume !== 100) {\n      channelRack.masterVolume = channelRack.sampleVolume * (this.masterVolume / 100);\n      channelRack.howlObject.volume(channelRack.masterVolume / 100);\n      return;\n    }\n    channelRack.sampleVolume = channelRack.mutedVolume;\n    channelRack.howlObject.volume(channelRack.mutedVolume / 100);\n  }\n\n  @action resetChannelRack = (sampleIndex) => {\n    this.channelRack[sampleIndex].beatBars.fill(false, 0, 32);\n  }\n\n  @action setChannelFrequency = (sampleIndex, frequencyCount) => {\n    for (let i = 0; i < this.channelRack[sampleIndex].beatBars.length; i++) {\n      if (i % frequencyCount === 0) {\n        this.channelRack[sampleIndex].beatBars[i] = true;\n      } else {\n        this.channelRack[sampleIndex].beatBars[i] = false;\n      }\n    }\n  }\n\n  @action resetMaster = () => {\n    for (var i = 0; i < this.channelRack.length; i++) {\n      this.resetChannelRack(i);\n    }\n  }\n\n  @action setMasterFrequency = (frequencyCount) => {\n    for (var i = 0; i < this.channelRack.length; i++) {\n      this.setChannelFrequency(i, frequencyCount);\n    }\n  }\n\n  @action muteMaster = () => {\n    this.masterMuted = this.masterVolume;\n    this.masterVolume = 0;\n    for (var sampleIndex = 0; sampleIndex < this.channelRack.length; sampleIndex++) {\n      this.muteVolume(sampleIndex);\n    }\n  }\n\n  @action unMuteMaster = () => {\n    this.masterVolume = this.masterMuted;\n    for (var sampleIndex = 0; sampleIndex < this.channelRack.length; sampleIndex++) {\n      this.unMuteVolume(sampleIndex);\n    }\n  }\n\n  @action changeMasterVolume = (newMasterVolume) => {\n    newMasterVolume = Number(newMasterVolume);\n    for (var sampleIndex = 0; sampleIndex < this.channelRack.length; sampleIndex++) {\n      let channelRack = this.channelRack[sampleIndex];\n      channelRack.masterVolume = (channelRack.sampleVolume * (newMasterVolume / 100));\n      channelRack.howlObject.volume(channelRack.masterVolume / 100);\n    }\n    this.masterVolume = newMasterVolume;\n  }\n\n  @action handleSampleUpload = (uploadedSample) => {\n    let sampleName = uploadedSample.name.split('.')[0];\n    sampleName = sampleName.charAt(0).toUpperCase() + sampleName.slice(1);\n    let beatBars = [];\n    for (var i = 0; i < 32; i++) {\n      beatBars.push(false);\n    }\n    const newSample = {\n      sampleName,\n      activeBeats: [],\n      beatBars,\n      sampleVolume: 75,\n      mutedVolume: 75,\n      masterVolume: 75,\n      howlObject: new Howl({\n        src: uploadedSample.base64,\n        volume: 0.75,\n      }),\n    };\n    this.channelRack.push(newSample);\n  }\n\n  @action bindKey = (sampleIndex, keyInput) => {\n    const keyCode = keyInput.charCodeAt(0);\n    if (!isNaN(keyCode) || keyInput === '') {\n      this.channelRack[sampleIndex].bindedKey = keyCode;\n    }\n  }\n\n  @action getKeyBindedSample = (keyCode) => {\n    for (var sampleIndex = 0; sampleIndex < this.channelRack.length; sampleIndex++) {\n      if (this.channelRack[sampleIndex].bindedKey === keyCode) {\n        return sampleIndex;\n      }\n    }\n    return false;\n  }\n\n  @action toggleNoteRecording = () => {\n    this.recordingNotes = !this.recordingNotes;\n  }\n\n  @action recordNotes = (sampleIndex, beatCount) => {\n    this.channelRack[sampleIndex].beatBars[beatCount] = true;\n  }\n\n  @action playBeats = (beatCount) => {\n    const activeSamples = this.getActiveSamples(beatCount);\n    activeSamples.forEach(sampleIndex => {\n      this.playSample(sampleIndex);\n    })\n  }\n\n  @action playSample = (sampleIndex) => {\n    const sample = this.channelRack[sampleIndex];\n    if (sampleIndex === 4) {\n      sample.howlObject.stop();\n    }\n    sample.howlObject.play();\n  }\n}\n\nexport default StepSequencerStore;\n","import PlayBarStore from './PlayBarStore';\nimport StepSequencerStore from './StepSequencerStore';\n\nclass Store {\n  constructor() {\n    this.playBarStore = new PlayBarStore(this);\n    this.stepSequencerStore = new StepSequencerStore(this);\n  }\n}\n\nexport default Store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport Store from '../src/stores';\n\nReactDOM.render(<Provider store={new Store()}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}